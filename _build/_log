### Starting build.
# Target: examples/simple_server/main.ml.depends, tags: { extension:ml, file:examples/simple_server/main.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules examples/simple_server/main.ml > examples/simple_server/main.ml.depends # cached
# Target: src/handler.ml.depends, tags: { extension:ml, file:src/handler.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/handler.ml > src/handler.ml.depends # cached
# Target: src/request.ml.depends, tags: { extension:ml, file:src/request.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/request.ml > src/request.ml.depends # cached
# Target: src/verb.ml.depends, tags: { extension:ml, file:src/verb.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/verb.ml > src/verb.ml.depends # cached
# Target: src/verb.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/verb.cmo, file:src/verb.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/verb.cmo src/verb.ml # cached
# Target: src/request.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/request.cmo, file:src/request.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/request.cmo src/request.ml # cached
# Target: src/response.ml.depends, tags: { extension:ml, file:src/response.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/response.ml > src/response.ml.depends
# Target: src/utils.ml.depends, tags: { extension:ml, file:src/utils.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/utils.ml > src/utils.ml.depends # cached
# Target: src/utils.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/utils.cmo, file:src/utils.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/utils.cmo src/utils.ml # cached
# Target: src/rule.ml.depends, tags: { extension:ml, file:src/rule.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/rule.ml > src/rule.ml.depends # cached
# Target: src/response.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/response.cmo, file:src/response.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/response.cmo src/response.ml
# Target: src/rule.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/rule.cmo, file:src/rule.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/rule.cmo src/rule.ml
# Target: src/server.ml.depends, tags: { extension:ml, file:src/server.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules src/server.ml > src/server.ml.depends
# Target: src/handler.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/handler.cmo, file:src/handler.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/handler.cmo src/handler.ml
# Target: src/server.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/server.cmo, file:src/server.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I src -o src/server.cmo src/server.ml
# Target: examples/simple_server/main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:examples/simple_server/main.cmo, file:examples/simple_server/main.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -I examples/simple_server -I src -o examples/simple_server/main.cmo examples/simple_server/main.ml
# Target: src/verb.cmx, tags: { compile, extension:cmx, extension:ml, file:src/verb.cmx, file:src/verb.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/verb.cmx src/verb.ml
# Target: src/request.cmx, tags: { compile, extension:cmx, extension:ml, file:src/request.cmx, file:src/request.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/request.cmx src/request.ml
# Target: src/utils.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utils.cmx, file:src/utils.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/utils.cmx src/utils.ml
# Target: src/response.cmx, tags: { compile, extension:cmx, extension:ml, file:src/response.cmx, file:src/response.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/response.cmx src/response.ml
# Target: src/rule.cmx, tags: { compile, extension:cmx, extension:ml, file:src/rule.cmx, file:src/rule.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/rule.cmx src/rule.ml
# Target: src/handler.cmx, tags: { compile, extension:cmx, extension:ml, file:src/handler.cmx, file:src/handler.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/handler.cmx src/handler.ml
# Target: src/server.cmx, tags: { compile, extension:cmx, extension:ml, file:src/server.cmx, file:src/server.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I src -o src/server.cmx src/server.ml
# Target: examples/simple_server/main.cmx, tags: { compile, extension:cmx, extension:ml, file:examples/simple_server/main.cmx, file:examples/simple_server/main.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -I examples/simple_server -I src -o examples/simple_server/main.cmx examples/simple_server/main.ml
# Target: examples/simple_server/main.native, tags: { dont_link_with, extension:native, file:examples/simple_server/main.native, link, native, ocaml, program, quiet }
/usr/local/bin/ocamlopt.opt unix.cmxa str.cmxa src/verb.cmx src/request.cmx src/utils.cmx src/response.cmx src/rule.cmx src/handler.cmx src/server.cmx examples/simple_server/main.cmx -o examples/simple_server/main.native
# Compilation successful.
